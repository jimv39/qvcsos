/*
 * Copyright 2021 Jim Voris.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.qumasoft.guitools.qwin.dialog;

import com.qumasoft.guitools.qwin.ProjectAppendedPathTableModel;
import com.qumasoft.guitools.qwin.QWinFrame;
import com.qumasoft.qvcslib.MergedInfoInterface;
import java.util.Set;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Jim Voris
 */
public class MoveFileDialog extends AbstractQWinCommandDialog implements ListSelectionListener {
    private ProjectAppendedPathTableModel projectAppendedPathTableModel;
    private boolean isOKFlag;
    private int selectedRow;

    /**
     * Creates new form MoveFileDialog.
     * @param qWinFrame the main application frame window.
     * @param tableModel the table model of the file list table. We'll fetch our appended path list from here.
     * @param mergedInfo the file that we are moving.
     * @param serverName the server name.
     * @param projectName the project name.
     * @param branchName the branch name.
     */
    public MoveFileDialog(QWinFrame qWinFrame, TableModel tableModel, MergedInfoInterface mergedInfo, String serverName, String projectName, String branchName) {
        super(qWinFrame, true);
        // Enable recursion so we know that all the appended paths are available from the table model.
        QWinFrame.getQWinFrame().setRecurseFlag(true);
        Set<String> appendedPathsSet = qWinFrame.getTreeModel().getAppendedPathsSet(serverName, projectName, branchName);
        projectAppendedPathTableModel = new ProjectAppendedPathTableModel(appendedPathsSet);
        projectAppendedPathTableModel.initialize();

        initComponents();
        appendedPathTable.getSelectionModel().addListSelectionListener(this);
        setFont();
        center();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appendedPathPanel = new javax.swing.JPanel();
        appendedPathScrollPane = new javax.swing.JScrollPane();
        appendedPathTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Move file to location...");

        appendedPathPanel.setPreferredSize(new java.awt.Dimension(800, 300));

        appendedPathTable.setModel(projectAppendedPathTableModel);
        appendedPathScrollPane.setViewportView(appendedPathTable);

        javax.swing.GroupLayout appendedPathPanelLayout = new javax.swing.GroupLayout(appendedPathPanel);
        appendedPathPanel.setLayout(appendedPathPanelLayout);
        appendedPathPanelLayout.setHorizontalGroup(
            appendedPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(appendedPathScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        appendedPathPanelLayout.setVerticalGroup(
            appendedPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(appendedPathScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        getContentPane().add(appendedPathPanel, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 300));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel2.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel2.add(cancelButton);

        getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        isOKFlag = true;
        dismissDialog();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dismissDialog();
    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appendedPathPanel;
    private javax.swing.JScrollPane appendedPathScrollPane;
    private javax.swing.JTable appendedPathTable;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    public String getNewAppendedPath() {
        String appendedPath = "";
        if (isOKFlag) {
            appendedPath = (String) projectAppendedPathTableModel.getValueAt(selectedRow, 0);
        }
        return appendedPath;
    }

    @Override
    public void dismissDialog() {
        setVisible(false);
        dispose();
    }

    @Override
    public void valueChanged(ListSelectionEvent lse) {
        selectedRow = lse.getFirstIndex();
    }

    /**
     * @return the isOKFlag
     */
    public boolean getIsOKFlag() {
        return isOKFlag;
    }

    /**
     * @param flag the isOKFlag to set
     */
    public void setIsOKFlag(boolean flag) {
        this.isOKFlag = flag;
    }
}

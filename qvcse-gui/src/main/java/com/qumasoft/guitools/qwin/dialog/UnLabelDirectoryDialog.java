/*   Copyright 2004-2014 Jim Voris
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package com.qumasoft.guitools.qwin.dialog;

import com.qumasoft.guitools.qwin.QWinFrame;
import com.qumasoft.guitools.qwin.operation.OperationUnLabelDirectory;
import com.qumasoft.qvcslib.commandargs.UnLabelDirectoryCommandArgs;

/**
 * Un-label directory dialog.
 *
 * @author Jim Voris
 */
public class UnLabelDirectoryDialog extends AbstractQWinCommandDialog {

    private static final long serialVersionUID = 5723404230089053408L;

    private final OperationUnLabelDirectory operationUnLabelDirectory;

    /**
     * Creates new form UnLabelDirectoryDialog.
     *
     * @param parent the parent frame.
     * @param operation the operation instance that will do the work.
     */
    public UnLabelDirectoryDialog(java.awt.Frame parent, OperationUnLabelDirectory operation) {
        super(parent, true);
        initComponents();
        this.operationUnLabelDirectory = operation;
        populateComponents();
        setFont();
        center();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
     * Editor.
     */
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelLabel = new javax.swing.JLabel();
        labelComboBox = new javax.swing.JComboBox();
        recurseDirectoriesCheckBox = new javax.swing.JCheckBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("UnLabel Directory");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        labelLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        labelLabel.setText("Label to Remove:");
        labelLabel.setToolTipText("Select or enter the label string that you want to remove");

        labelComboBox.setEditable(true);
        labelComboBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        labelComboBox.setMaximumRowCount(15);
        labelComboBox.setToolTipText("");
        labelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelComboBoxActionPerformed(evt);
            }
        });
        labelComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                labelComboBoxKeyTyped(evt);
            }
        });

        recurseDirectoriesCheckBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        recurseDirectoriesCheckBox.setMnemonic('R');
        recurseDirectoriesCheckBox.setText("Recurse Directories");
        recurseDirectoriesCheckBox.setToolTipText("Enable to recurse into the directory tree.");
        recurseDirectoriesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recurseDirectoriesCheckBoxActionPerformed(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        okButton.setText("   OK   ");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(recurseDirectoriesCheckBox)
                                .add(labelLabel)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, labelComboBox, 0, 342, Short.MAX_VALUE)
                                .add(layout.createSequentialGroup()
                                        .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 142, Short.MAX_VALUE)
                                        .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(labelLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(recurseDirectoriesCheckBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(okButton)
                                .add(cancelButton))
                        .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelComboBoxKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_labelComboBoxKeyTyped
    {//GEN-HEADEREND:event_labelComboBoxKeyTyped
        String labelString = (String) labelComboBox.getModel().getSelectedItem();
        if (labelString.length() > 0) {
            okButton.setEnabled(true);
        } else {
            okButton.setEnabled(false);
        }
    }//GEN-LAST:event_labelComboBoxKeyTyped

    private void labelComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_labelComboBoxActionPerformed
    {//GEN-HEADEREND:event_labelComboBoxActionPerformed
        String labelString = (String) labelComboBox.getModel().getSelectedItem();
        if (labelString.length() > 0) {
            okButton.setEnabled(true);
        }
    }//GEN-LAST:event_labelComboBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        closeDialog(null);
        UnLabelDirectoryCommandArgs commandArgs = new UnLabelDirectoryCommandArgs();

        commandArgs.setLabelString(getLabelString());
        commandArgs.setRecurseFlag(getRecurseFlag());

        commandArgs.setUserName(QWinFrame.getQWinFrame().getLoggedInUserName());

        operationUnLabelDirectory.completeOperation(commandArgs);
    }//GEN-LAST:event_okButtonActionPerformed

    private void closeDialog(java.awt.event.WindowEvent evt)//GEN-FIRST:event_closeDialog
    {//GEN-HEADEREND:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void recurseDirectoriesCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_recurseDirectoriesCheckBoxActionPerformed
    {//GEN-HEADEREND:event_recurseDirectoriesCheckBoxActionPerformed
        Object recurseFlag = recurseDirectoriesCheckBox.getSelectedObjects();
        if (recurseFlag != null) {
            QWinFrame.getQWinFrame().setRecurseFlag(true);
        } else {
            QWinFrame.getQWinFrame().setRecurseFlag(false);
        }
    }//GEN-LAST:event_recurseDirectoriesCheckBoxActionPerformed

    boolean getRecurseFlag() {
        boolean retVal = false;
        Object recurseFlag = recurseDirectoriesCheckBox.getSelectedObjects();
        if (recurseFlag != null) {
            retVal = true;
        }
        return retVal;
    }

    String getLabelString() {
        String labelString = (String) labelComboBox.getModel().getSelectedItem();
        return labelString;
    }

    @Override
    public void dismissDialog() {
        closeDialog(null);
    }

    private void populateComponents() {
        labelComboBox.setModel(new LabelsComboModel());
        if (labelComboBox.getItemCount() > 0) {
            okButton.setEnabled(true);
        }
    }
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox labelComboBox;
    private javax.swing.JLabel labelLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox recurseDirectoriesCheckBox;
// End of variables declaration//GEN-END:variables
}

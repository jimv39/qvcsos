/*
 * Copyright 2023 Jim Voris.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.qumasoft.guitools.qwin.dialog;

import com.qumasoft.guitools.qwin.QWinFrame;
import com.qumasoft.guitools.qwin.ServersComboModel;
import com.qumasoft.guitools.qwin.operation.OperationMaintainServerBaseClass;
import com.qumasoft.qvcslib.ServerProperties;
import com.qumasoft.qvcslib.TransportProxyFactory;
import com.qumasoft.qvcslib.TransportProxyInterface;
import com.qumasoft.qvcslib.TransportProxyListenerInterface;
import com.qumasoft.qvcslib.TransportProxyType;
import com.qumasoft.qvcslib.Utility;
import com.qumasoft.qvcslib.VisualCompareInterface;
import com.qumasoft.qvcslib.response.ServerResponseInterface;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * Login to a server at client application startup.
 *
 * @author Jim Voris.
 */
public class LoginDialog extends javax.swing.JDialog implements TransportProxyListenerInterface, VisualCompareInterface {
    private static final int MAXIMUM_LOGIN_ATTEMPTS = 5;

    private boolean isOKFlag = false;
    private boolean forceQWinFrameExit = false;
    private int loginAttempts = 0;

    /**
     * Creates new form LoginDialog.
     *
     * @param parent ignored.
     */
    public LoginDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        userNameTextField.setText(System.getProperty("user.name"));
        getRootPane().setDefaultButton(okButton);
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width) / 2 - getWidth() / 2, (Toolkit.getDefaultToolkit().getScreenSize().height) / 2 - getHeight() / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverNameLabel = new javax.swing.JLabel();
        serverNameComboBox = new javax.swing.JComboBox<>();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordPasswordField = new javax.swing.JPasswordField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        addServerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Login");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        serverNameLabel.setText("Server Name:");

        serverNameComboBox.setModel(new ServersComboModel());

        userNameLabel.setText("User name:");

        passwordLabel.setText("Password:");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addServerButton.setText("Add Server");
        addServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addServerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(serverNameLabel)
                    .addComponent(serverNameComboBox, 0, 365, Short.MAX_VALUE)
                    .addComponent(userNameLabel)
                    .addComponent(userNameTextField)
                    .addComponent(passwordLabel)
                    .addComponent(passwordPasswordField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addServerButton)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(userNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(passwordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)
                    .addComponent(addServerButton))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Try to login. If login is successful, then we set the isOKFlag to true.
        String serverName = (String) serverNameComboBox.getModel().getSelectedItem();
        ServerProperties serverProperties = new ServerProperties(System.getProperty("user.dir"), serverName);
        loginToSelectedServer(serverProperties);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        forceQWinFrameExit = true;
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        if (forceQWinFrameExit) {
            QWinFrame.getQWinFrame().exitTheApp();
        }
        dispose();
    }//GEN-LAST:event_closeDialog

    private void addServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addServerButtonActionPerformed
        OperationMaintainServerBaseClass operationMaintainServerBaseClass = new OperationMaintainServerBaseClass(null, null);
        ServerPropertiesDialog addServerDialog = new ServerPropertiesDialog(QWinFrame.getQWinFrame(), operationMaintainServerBaseClass, true, null);
        addServerDialog.setVisible(true);
        try {
            if (addServerDialog.getIsOK()) {
                ServersComboModel serversComboModel = (ServersComboModel) serverNameComboBox.getModel();
                serversComboModel.addElement(addServerDialog.getServerName());
            }
        } catch (Exception e) {
            final Exception finalE = e;
            Runnable later = () -> {
                // Let the user know that we had a problem.
                JOptionPane.showConfirmDialog(this, "Exception: " + finalE.getLocalizedMessage(), "Exception", JOptionPane.PLAIN_MESSAGE);
            };
            SwingUtilities.invokeLater(later);
        }
    }//GEN-LAST:event_addServerButtonActionPerformed

    private void loginToSelectedServer(ServerProperties serverProperties) {

        String userNameString = userNameTextField.getText();
        String passwordString = new String(passwordPasswordField.getPassword());

        System.setProperty("user.name", userNameString);

        // Make us a listener for password change responses
        if (loginAttempts == 0) {
            TransportProxyFactory.getInstance().addChangedPasswordListener(QWinFrame.getQWinFrame());
        }

        QWinFrame.getQWinFrame().savePendingPassword(serverProperties.getServerName(), passwordString);

        QWinFrame.getQWinFrame().saveUsernamePassword(serverProperties.getServerName(), userNameString, passwordString);

        QWinFrame.getQWinFrame().setPendingServerProperties(serverProperties);

        final QWinFrame finalQWinFrame = QWinFrame.getQWinFrame();

        // The type of transport we'll use...
        final TransportProxyType transportType = serverProperties.getClientTransport();

        // The port we'll connect on...
        final int port = serverProperties.getClientPort();

        // Hash the password...
        final byte[] hashedPassword = Utility.getInstance().hashPassword(passwordString);

        // Put this on a separate thread since it could take some time.
        Runnable worker = () -> {
            // And force the login to the transport...
            TransportProxyInterface transportProxy = TransportProxyFactory.getInstance().getTransportProxy(transportType, serverProperties, port,
                    userNameString, hashedPassword, finalQWinFrame, finalQWinFrame);
            if (transportProxy == null) {
                // The login failed...
                forceQWinFrameExit = true;
                final String message = "Server is down, or not available at: " + serverProperties.getServerIPAddress() + ":" + port;
                Runnable later = () -> {
                    JOptionPane.showConfirmDialog(this, message, "Server Not Available", JOptionPane.PLAIN_MESSAGE);
                };
                SwingUtilities.invokeLater(later);
            } else {
                if (transportProxy.getIsOpen()) {
                    // Login was successful...
                    isOKFlag = true;
                    QWinFrame.getQWinFrame().setActiveServer(serverProperties);

                    if (loginAttempts == 0) {
                        QWinFrame.getQWinFrame().initialize(transportProxy);
                    }
                    loginAttempts++;

                    // Initialization has completed; call this again to get things restored to where they were last time.
                    serverProperties.setWebServerPort(QWinFrame.getQWinFrame().getPendingServerProperties().getWebServerPort());
                    QWinFrame.getQWinFrame().setActiveServer(serverProperties);

                    forceQWinFrameExit = false;
                    closeDialog(null);
                } else {
                    final String message = "Invalid username/password for: " + serverProperties.getServerIPAddress() + ":" + port;
                    forceQWinFrameExit = true;
                    Runnable later = () -> {
                        // Let the user know that the password no good.
                        JOptionPane.showConfirmDialog(this, message, "Invalid username/password", JOptionPane.PLAIN_MESSAGE);
                        if (loginAttempts > MAXIMUM_LOGIN_ATTEMPTS) {
                            JOptionPane.showConfirmDialog(this, "Maximum login attempts failed", "Maximum login attempts failed", JOptionPane.PLAIN_MESSAGE);
                            cancelButtonActionPerformed(null);
                        }
                    };
                    SwingUtilities.invokeLater(later);
                }
            }
        };
        SwingUtilities.invokeLater(worker);
    }

    @Override
    public void notifyTransportProxyListener(ServerResponseInterface message) {
    }

    @Override
    public void visualCompare(String file1Name, String file2Name, String display1, String display2) {
    }

    public boolean getIsOK() {
        return isOKFlag;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addServerButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordPasswordField;
    private javax.swing.JComboBox<String> serverNameComboBox;
    private javax.swing.JLabel serverNameLabel;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
